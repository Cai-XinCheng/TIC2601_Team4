CREATE TABLE user (
  username VARCHAR(20) PRIMARY KEY,
  password VARCHAR(64) NOT NULL,
  email VARCHAR(35) NOT NULL UNIQUE,
  reputation INT NOT NULL DEFAULT 0,
  is_admin TINYINT(1) NOT NULL DEFAULT 0,
  is_blocked TINYINT(1) NOT NULL DEFAULT 0,
  created_at DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP(),
  check(length(username) >=5)
);

CREATE TABLE category (
  category VARCHAR(45) NOT NULL PRIMARY KEY
);

CREATE TABLE subscribe (
  username VARCHAR(20) REFERENCES user(username) ON DELETE CASCADE,
  category VARCHAR(45) REFERENCES category(category) ON DELETE CASCADE ON UPDATE CASCADE,
  PRIMARY KEY (username, category)
);

CREATE TABLE post (
  post_id INT PRIMARY KEY AUTO_INCREMENT,
  username VARCHAR(20) NOT NULL REFERENCES user(username) ON DELETE CASCADE,
  category VARCHAR(45) NOT NULL REFERENCES category(category) ON DELETE CASCADE ON UPDATE CASCADE,
  header VARCHAR(255) NOT NULL,
  content VARCHAR(16000),
  updated_at DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP() ON UPDATE CURRENT_TIMESTAMP(),
  created_at DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP()
);

CREATE TABLE comment (
  comment_id INT NOT NULL AUTO_INCREMENT,
  post_id INT NOT NULL REFERENCES post(post_id) ON DELETE CASCADE,
  parent_comment_id INT REFERENCES comment(comment_id) ON DELETE CASCADE,
  username VARCHAR(20) NOT NULL REFERENCES user(username) ON DELETE CASCADE,
  content VARCHAR(16000),
  updated_at DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP() ON UPDATE CURRENT_TIMESTAMP(),
  created_at DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP(),
  PRIMARY KEY(comment_id, post_id)
);


CREATE TABLE vote_post (
  username VARCHAR(20) REFERENCES user(username) ON DELETE CASCADE,
  post_id INT REFERENCES post(post_id) ON DELETE CASCADE,
  is_upvote TINYINT(1) NOT NULL,
  updated_at DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP() ON UPDATE CURRENT_TIMESTAMP(),
  PRIMARY KEY (username, post_id),
);

CREATE TABLE vote_comment (
  username VARCHAR(20) REFERENCES user(username) ON DELETE CASCADE,
  post_id INT REFERENCES comment(post_id) ON DELETE CASCADE,
  comment_id INT REFERENCES comment(comment_id) ON DELETE CASCADE,
  is_upvote TINYINT(1) NOT NULL,
  updated_at DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP() ON UPDATE CURRENT_TIMESTAMP(),
  PRIMARY KEY (username, post_id, comment_id),
);

-- Trigger statement
CREATE TRIGGER reput_ins_voteComm AFTER INSERT ON vote_comment
FOR EACH ROW BEGIN
	IF NEW.is_upvote = 1 THEN
		UPDATE user u SET reputation = reputation + 1 WHERE EXISTS (SELECT * FROM post p WHERE NEW.post_id = p.Post_id AND p.username = u.username);
	ELSE
		UPDATE user u SET reputation = reputation - 1 WHERE EXISTS (SELECT * FROM post p WHERE NEW.post_id = p.Post_id AND p.username = u.username);    
	END IF;
END; //

CREATE TRIGGER reput_update_voteComm AFTER UPDATE ON vote_comment
FOR EACH ROW BEGIN
	IF NEW.is_upvote = 1 THEN
		UPDATE user u SET reputation = reputation + 1 WHERE EXISTS (SELECT * FROM post p WHERE NEW.post_id = p.Post_id AND p.username = u.username);
	ELSE
		UPDATE user u SET reputation = reputation - 1 WHERE EXISTS (SELECT * FROM post p WHERE NEW.post_id = p.Post_id AND p.username = u.username);    
	END IF;
END; //

CREATE TRIGGER reput_ins_votePost AFTER INSERT ON vote_post
FOR EACH ROW BEGIN
	IF NEW.is_upvote = 1 THEN
		UPDATE user u SET reputation = reputation + 1 WHERE EXISTS (SELECT * FROM post p WHERE NEW.post_id = p.Post_id AND p.username = u.username);
	ELSE
		UPDATE user u SET reputation = reputation - 1 WHERE EXISTS (SELECT * FROM post p WHERE NEW.post_id = p.Post_id AND p.username = u.username);    
	END IF;
END; //

CREATE TRIGGER reput_update_votePost AFTER UPDATE ON vote_post
FOR EACH ROW BEGIN
	IF NEW.is_upvote = 1 THEN
		UPDATE user u SET reputation = reputation + 1 WHERE EXISTS (SELECT * FROM post p WHERE NEW.post_id = p.Post_id AND p.username = u.username);
	ELSE
		UPDATE user u SET reputation = reputation - 1 WHERE EXISTS (SELECT * FROM post p WHERE NEW.post_id = p.Post_id AND p.username = u.username);    
	END IF;
END; //
